{
  "sarifVersion": "2.0.0",
  "runs": [
    {
      "files": {
        "okhttp3/internal/platform/ConscryptPlatform.java": {
          "mimeType": "text/java"
        },
        "com/facebook/react/modules/network/C.java": {
          "mimeType": "text/java"
        },
        "okhttp3/OkHttpClient.java": {
          "mimeType": "text/java"
        },
        "okhttp3/internal/platform/Platform.java": {
          "mimeType": "text/java"
        },
        "okhttp3/internal/Util.java": {
          "mimeType": "text/java"
        },
        "com/RNFetchBlob/D.java": {
          "mimeType": "text/java"
        },
        "com/facebook/soloader/m.java": {
          "mimeType": "text/java"
        },
        "e/j.java": {
          "mimeType": "text/java"
        },
        "okhttp3/internal/platform/AndroidPlatform.java": {
          "mimeType": "text/java"
        },
        "com/RNFetchBlob/A.java": {
          "mimeType": "text/java"
        },
        "c/c/d/k/c.java": {
          "mimeType": "text/java"
        },
        "com/RNFetchBlob/t.java": {
          "mimeType": "text/java"
        }
      },
      "resources": {
        "rules": {
          "ConstraintError-10": {
            "id": "ConstraintError",
            "fullDescription": {
              "text": "A constraint of a CrySL rule is violated, e.g., a key is generated with the wrong key size."
            }
          },
          "TypestateError-1": {
            "id": "TypestateError",
            "fullDescription": {
              "text": "The ORDER block of CrySL is violated, i.e., the expected method sequence call to be made is incorrect. For example, a Signature object expects a call to initSign(key) prior to update(data)."
            }
          },
          "ConstraintError-1": {
            "id": "ConstraintError",
            "fullDescription": {
              "text": "A constraint of a CrySL rule is violated, e.g., a key is generated with the wrong key size."
            }
          },
          "ConstraintError-2": {
            "id": "ConstraintError",
            "fullDescription": {
              "text": "A constraint of a CrySL rule is violated, e.g., a key is generated with the wrong key size."
            }
          },
          "ConstraintError-3": {
            "id": "ConstraintError",
            "fullDescription": {
              "text": "A constraint of a CrySL rule is violated, e.g., a key is generated with the wrong key size."
            }
          },
          "ConstraintError-4": {
            "id": "ConstraintError",
            "fullDescription": {
              "text": "A constraint of a CrySL rule is violated, e.g., a key is generated with the wrong key size."
            }
          },
          "ConstraintError-5": {
            "id": "ConstraintError",
            "fullDescription": {
              "text": "A constraint of a CrySL rule is violated, e.g., a key is generated with the wrong key size."
            }
          },
          "RequiredPredicateError": {
            "id": "RequiredPredicateError",
            "fullDescription": {
              "text": "An object A expects an object B to have been used correctly (CrySL blocks REQUIRES and ENSURES). For example a Cipher object requires a SecretKey object to be correctly and securely generated."
            }
          },
          "ConstraintError-6": {
            "id": "ConstraintError",
            "fullDescription": {
              "text": "A constraint of a CrySL rule is violated, e.g., a key is generated with the wrong key size."
            }
          },
          "RequiredPredicateError-11": {
            "id": "RequiredPredicateError",
            "fullDescription": {
              "text": "An object A expects an object B to have been used correctly (CrySL blocks REQUIRES and ENSURES). For example a Cipher object requires a SecretKey object to be correctly and securely generated."
            }
          },
          "ConstraintError-7": {
            "id": "ConstraintError",
            "fullDescription": {
              "text": "A constraint of a CrySL rule is violated, e.g., a key is generated with the wrong key size."
            }
          },
          "RequiredPredicateError-10": {
            "id": "RequiredPredicateError",
            "fullDescription": {
              "text": "An object A expects an object B to have been used correctly (CrySL blocks REQUIRES and ENSURES). For example a Cipher object requires a SecretKey object to be correctly and securely generated."
            }
          },
          "ConstraintError-8": {
            "id": "ConstraintError",
            "fullDescription": {
              "text": "A constraint of a CrySL rule is violated, e.g., a key is generated with the wrong key size."
            }
          },
          "RequiredPredicateError-13": {
            "id": "RequiredPredicateError",
            "fullDescription": {
              "text": "An object A expects an object B to have been used correctly (CrySL blocks REQUIRES and ENSURES). For example a Cipher object requires a SecretKey object to be correctly and securely generated."
            }
          },
          "ConstraintError-9": {
            "id": "ConstraintError",
            "fullDescription": {
              "text": "A constraint of a CrySL rule is violated, e.g., a key is generated with the wrong key size."
            }
          },
          "RequiredPredicateError-12": {
            "id": "RequiredPredicateError",
            "fullDescription": {
              "text": "An object A expects an object B to have been used correctly (CrySL blocks REQUIRES and ENSURES). For example a Cipher object requires a SecretKey object to be correctly and securely generated."
            }
          },
          "RequiredPredicateError-9": {
            "id": "RequiredPredicateError",
            "fullDescription": {
              "text": "An object A expects an object B to have been used correctly (CrySL blocks REQUIRES and ENSURES). For example a Cipher object requires a SecretKey object to be correctly and securely generated."
            }
          },
          "RequiredPredicateError-8": {
            "id": "RequiredPredicateError",
            "fullDescription": {
              "text": "An object A expects an object B to have been used correctly (CrySL blocks REQUIRES and ENSURES). For example a Cipher object requires a SecretKey object to be correctly and securely generated."
            }
          },
          "RequiredPredicateError-7": {
            "id": "RequiredPredicateError",
            "fullDescription": {
              "text": "An object A expects an object B to have been used correctly (CrySL blocks REQUIRES and ENSURES). For example a Cipher object requires a SecretKey object to be correctly and securely generated."
            }
          },
          "TypestateError": {
            "id": "TypestateError",
            "fullDescription": {
              "text": "The ORDER block of CrySL is violated, i.e., the expected method sequence call to be made is incorrect. For example, a Signature object expects a call to initSign(key) prior to update(data)."
            }
          },
          "RequiredPredicateError-6": {
            "id": "RequiredPredicateError",
            "fullDescription": {
              "text": "An object A expects an object B to have been used correctly (CrySL blocks REQUIRES and ENSURES). For example a Cipher object requires a SecretKey object to be correctly and securely generated."
            }
          },
          "RequiredPredicateError-5": {
            "id": "RequiredPredicateError",
            "fullDescription": {
              "text": "An object A expects an object B to have been used correctly (CrySL blocks REQUIRES and ENSURES). For example a Cipher object requires a SecretKey object to be correctly and securely generated."
            }
          },
          "RequiredPredicateError-4": {
            "id": "RequiredPredicateError",
            "fullDescription": {
              "text": "An object A expects an object B to have been used correctly (CrySL blocks REQUIRES and ENSURES). For example a Cipher object requires a SecretKey object to be correctly and securely generated."
            }
          },
          "RequiredPredicateError-3": {
            "id": "RequiredPredicateError",
            "fullDescription": {
              "text": "An object A expects an object B to have been used correctly (CrySL blocks REQUIRES and ENSURES). For example a Cipher object requires a SecretKey object to be correctly and securely generated."
            }
          },
          "ConstraintError": {
            "id": "ConstraintError",
            "fullDescription": {
              "text": "A constraint of a CrySL rule is violated, e.g., a key is generated with the wrong key size."
            }
          },
          "RequiredPredicateError-2": {
            "id": "RequiredPredicateError",
            "fullDescription": {
              "text": "An object A expects an object B to have been used correctly (CrySL blocks REQUIRES and ENSURES). For example a Cipher object requires a SecretKey object to be correctly and securely generated."
            }
          },
          "RequiredPredicateError-1": {
            "id": "RequiredPredicateError",
            "fullDescription": {
              "text": "An object A expects an object B to have been used correctly (CrySL blocks REQUIRES and ENSURES). For example a Cipher object requires a SecretKey object to be correctly and securely generated."
            }
          }
        }
      },
      "results": [
        {
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "com.RNFetchBlob.t.java",
                  "PossibleExternalLibrary": true
                },
                "region": {
                  "startLine": -1
                }
              },
              "fullyQualifiedLogicalName": "com::RNFetchBlob::t::a"
            }
          ],
          "ruleId": "TypestateError",
          "message": {
            "text": "Unexpected call to method <java.security.MessageDigest: byte[] digest()> on object of type java.security.MessageDigest. Expect a call to one of the following methods java.security.MessageDigest: void update(byte[],int,int),java.security.MessageDigest: void update(java.nio.ByteBuffer),java.security.MessageDigest: byte[] digest(byte[]),java.security.MessageDigest: void update(byte),java.security.MessageDigest: void update(byte[]).",
            "richText": "TypestateError violating CrySL rule for java.security.MessageDigest."
          }
        },
        {
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "com.RNFetchBlob.A.java",
                  "PossibleExternalLibrary": true
                },
                "region": {
                  "startLine": -1
                }
              },
              "fullyQualifiedLogicalName": "com::RNFetchBlob::A::a"
            }
          ],
          "ruleId": "RequiredPredicateError",
          "message": {
            "text": "Second parameter was not properly generated as generated Trust Managers.",
            "richText": "RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext."
          }
        },
        {
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "com.RNFetchBlob.A.java",
                  "PossibleExternalLibrary": true
                },
                "region": {
                  "startLine": -1
                }
              },
              "fullyQualifiedLogicalName": "com::RNFetchBlob::A::a"
            }
          ],
          "ruleId": "RequiredPredicateError-1",
          "message": {
            "text": "Third parameter was not properly generated as randomized.",
            "richText": "RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext."
          }
        },
        {
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "com.RNFetchBlob.A.java",
                  "PossibleExternalLibrary": true
                },
                "region": {
                  "startLine": -1
                }
              },
              "fullyQualifiedLogicalName": "com::RNFetchBlob::A::a"
            }
          ],
          "ruleId": "ConstraintError",
          "message": {
            "text": "First parameter (with value \"SSL\") should be any of {TLSv1.2, TLSv1.3}.",
            "richText": "ConstraintError violating CrySL rule for javax.net.ssl.SSLContext."
          }
        },
        {
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "com.RNFetchBlob.A.java",
                  "PossibleExternalLibrary": true
                },
                "region": {
                  "startLine": -1
                }
              },
              "fullyQualifiedLogicalName": "com::RNFetchBlob::A::a"
            }
          ],
          "ruleId": "RequiredPredicateError-2",
          "message": {
            "text": "First parameter was not properly generated as generated Key Store.",
            "richText": "RequiredPredicateError violating CrySL rule for javax.net.ssl.TrustManagerFactory."
          }
        },
        {
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "com.RNFetchBlob.A.java",
                  "PossibleExternalLibrary": true
                },
                "region": {
                  "startLine": -1
                }
              },
              "fullyQualifiedLogicalName": "com::RNFetchBlob::A::a"
            }
          ],
          "ruleId": "RequiredPredicateError-3",
          "message": {
            "text": "First parameter was not properly generated as generated Key Managers.",
            "richText": "RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext."
          }
        },
        {
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "com.RNFetchBlob.D.java",
                  "PossibleExternalLibrary": true
                },
                "region": {
                  "startLine": -1
                }
              },
              "fullyQualifiedLogicalName": "com::RNFetchBlob::D::a"
            }
          ],
          "ruleId": "RequiredPredicateError-4",
          "message": {
            "text": "Third parameter was not properly generated as randomized.",
            "richText": "RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext."
          }
        },
        {
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "com.RNFetchBlob.D.java",
                  "PossibleExternalLibrary": true
                },
                "region": {
                  "startLine": -1
                }
              },
              "fullyQualifiedLogicalName": "com::RNFetchBlob::D::a"
            }
          ],
          "ruleId": "RequiredPredicateError-5",
          "message": {
            "text": "First parameter was not properly generated as generated Key Managers.",
            "richText": "RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext."
          }
        },
        {
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "com.RNFetchBlob.D.java",
                  "PossibleExternalLibrary": true
                },
                "region": {
                  "startLine": -1
                }
              },
              "fullyQualifiedLogicalName": "com::RNFetchBlob::D::a"
            }
          ],
          "ruleId": "RequiredPredicateError-6",
          "message": {
            "text": "Second parameter was not properly generated as generated Trust Managers.",
            "richText": "RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext."
          }
        },
        {
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "com.RNFetchBlob.D.java",
                  "PossibleExternalLibrary": true
                },
                "region": {
                  "startLine": -1
                }
              },
              "fullyQualifiedLogicalName": "com::RNFetchBlob::D::a"
            }
          ],
          "ruleId": "ConstraintError-1",
          "message": {
            "text": "First parameter (with value \"SSL\") should be any of {TLSv1.2, TLSv1.3}.",
            "richText": "ConstraintError violating CrySL rule for javax.net.ssl.SSLContext."
          }
        },
        {
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "com.RNFetchBlob.D.java",
                  "PossibleExternalLibrary": true
                },
                "region": {
                  "startLine": -1
                }
              },
              "fullyQualifiedLogicalName": "com::RNFetchBlob::D::b"
            }
          ],
          "ruleId": "ConstraintError-2",
          "message": {
            "text": "First parameter (with value \"MD5\") should be any of {SHA-256, SHA-384, SHA-512}.",
            "richText": "ConstraintError violating CrySL rule for java.security.MessageDigest."
          }
        },
        {
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "c.c.d.k.c.java"
                },
                "region": {
                  "startLine": -1
                }
              },
              "fullyQualifiedLogicalName": "c::c::d::k::c::a"
            }
          ],
          "ruleId": "ConstraintError-3",
          "message": {
            "text": "First parameter (with value \"SHA-1\") should be any of {SHA-256, SHA-384, SHA-512}.",
            "richText": "ConstraintError violating CrySL rule for java.security.MessageDigest."
          }
        },
        {
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "com.facebook.soloader.m.java",
                  "externalLibrary": true,
                  "PossibleExternalLibrary": true
                },
                "region": {
                  "startLine": -1
                }
              },
              "fullyQualifiedLogicalName": "com::facebook::soloader::m::a"
            }
          ],
          "ruleId": "ConstraintError-4",
          "message": {
            "text": "First parameter (with value \"MD5\") should be any of {SHA-256, SHA-384, SHA-512}.",
            "richText": "ConstraintError violating CrySL rule for java.security.MessageDigest."
          }
        },
        {
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "com.facebook.soloader.m.java",
                  "externalLibrary": true,
                  "PossibleExternalLibrary": true
                },
                "region": {
                  "startLine": -1
                }
              },
              "fullyQualifiedLogicalName": "com::facebook::soloader::m::a"
            }
          ],
          "ruleId": "TypestateError-1",
          "message": {
            "text": "Unexpected call to method <java.security.MessageDigest: byte[] digest()> on object of type java.security.MessageDigest. Expect a call to one of the following methods java.security.MessageDigest: void update(byte[],int,int),java.security.MessageDigest: void update(java.nio.ByteBuffer),java.security.MessageDigest: byte[] digest(byte[]),java.security.MessageDigest: void update(byte),java.security.MessageDigest: void update(byte[]).",
            "richText": "TypestateError violating CrySL rule for java.security.MessageDigest."
          }
        },
        {
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "okhttp3.internal.platform.Platform.java",
                  "externalLibrary": true,
                  "PossibleExternalLibrary": true
                },
                "region": {
                  "startLine": -1
                }
              },
              "fullyQualifiedLogicalName": "okhttp3::internal::platform::Platform::getSSLContext"
            }
          ],
          "ruleId": "ConstraintError-5",
          "message": {
            "text": "First parameter (with value \"TLS\") should be any of {TLSv1.2, TLSv1.3}.",
            "richText": "ConstraintError violating CrySL rule for javax.net.ssl.SSLContext."
          }
        },
        {
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "okhttp3.internal.platform.ConscryptPlatform.java",
                  "externalLibrary": true,
                  "PossibleExternalLibrary": true
                },
                "region": {
                  "startLine": -1
                }
              },
              "fullyQualifiedLogicalName": "okhttp3::internal::platform::ConscryptPlatform::getSSLContext"
            }
          ],
          "ruleId": "ConstraintError-6",
          "message": {
            "text": "First parameter (with value \"TLS\") should be any of {TLSv1.2, TLSv1.3}.",
            "richText": "ConstraintError violating CrySL rule for javax.net.ssl.SSLContext."
          }
        },
        {
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "okhttp3.internal.platform.AndroidPlatform.java",
                  "externalLibrary": true,
                  "PossibleExternalLibrary": true
                },
                "region": {
                  "startLine": -1
                }
              },
              "fullyQualifiedLogicalName": "okhttp3::internal::platform::AndroidPlatform::getSSLContext"
            }
          ],
          "ruleId": "ConstraintError-7",
          "message": {
            "text": "First parameter (with value \"TLS\") should be any of {TLSv1.2, TLSv1.3}.",
            "richText": "ConstraintError violating CrySL rule for javax.net.ssl.SSLContext."
          }
        },
        {
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "com.facebook.react.modules.network.C.java",
                  "externalLibrary": true,
                  "PossibleExternalLibrary": true
                },
                "region": {
                  "startLine": -1
                }
              },
              "fullyQualifiedLogicalName": "com::facebook::react::modules::network::C::<init>"
            }
          ],
          "ruleId": "RequiredPredicateError-7",
          "message": {
            "text": "First parameter was not properly generated as generated Key Managers.",
            "richText": "RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext."
          }
        },
        {
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "com.facebook.react.modules.network.C.java",
                  "externalLibrary": true,
                  "PossibleExternalLibrary": true
                },
                "region": {
                  "startLine": -1
                }
              },
              "fullyQualifiedLogicalName": "com::facebook::react::modules::network::C::<init>"
            }
          ],
          "ruleId": "ConstraintError-8",
          "message": {
            "text": "First parameter (with value \"TLS\") should be any of {TLSv1.2, TLSv1.3}.",
            "richText": "ConstraintError violating CrySL rule for javax.net.ssl.SSLContext."
          }
        },
        {
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "com.facebook.react.modules.network.C.java",
                  "externalLibrary": true,
                  "PossibleExternalLibrary": true
                },
                "region": {
                  "startLine": -1
                }
              },
              "fullyQualifiedLogicalName": "com::facebook::react::modules::network::C::<init>"
            }
          ],
          "ruleId": "RequiredPredicateError-8",
          "message": {
            "text": "Third parameter was not properly generated as randomized.",
            "richText": "RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext."
          }
        },
        {
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "com.facebook.react.modules.network.C.java",
                  "externalLibrary": true,
                  "PossibleExternalLibrary": true
                },
                "region": {
                  "startLine": -1
                }
              },
              "fullyQualifiedLogicalName": "com::facebook::react::modules::network::C::<init>"
            }
          ],
          "ruleId": "RequiredPredicateError-9",
          "message": {
            "text": "Second parameter was not properly generated as generated Trust Managers.",
            "richText": "RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext."
          }
        },
        {
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "e.j.java"
                },
                "region": {
                  "startLine": -1
                }
              },
              "fullyQualifiedLogicalName": "e::j::d"
            }
          ],
          "ruleId": "ConstraintError-9",
          "message": {
            "text": "First parameter (with value \"SHA-1\") should be any of {SHA-256, SHA-384, SHA-512}.",
            "richText": "ConstraintError violating CrySL rule for java.security.MessageDigest."
          }
        },
        {
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "e.j.java"
                },
                "region": {
                  "startLine": -1
                }
              },
              "fullyQualifiedLogicalName": "e::j::d"
            }
          ],
          "ruleId": "ConstraintError-10",
          "message": {
            "text": "First parameter (with value \"MD5\") should be any of {SHA-256, SHA-384, SHA-512}.",
            "richText": "ConstraintError violating CrySL rule for java.security.MessageDigest."
          }
        },
        {
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "okhttp3.OkHttpClient.java",
                  "externalLibrary": true,
                  "PossibleExternalLibrary": true
                },
                "region": {
                  "startLine": -1
                }
              },
              "fullyQualifiedLogicalName": "okhttp3::OkHttpClient::newSslSocketFactory"
            }
          ],
          "ruleId": "RequiredPredicateError-10",
          "message": {
            "text": "Second parameter was not properly generated as generated Trust Managers.",
            "richText": "RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext."
          }
        },
        {
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "okhttp3.OkHttpClient.java",
                  "externalLibrary": true,
                  "PossibleExternalLibrary": true
                },
                "region": {
                  "startLine": -1
                }
              },
              "fullyQualifiedLogicalName": "okhttp3::OkHttpClient::newSslSocketFactory"
            }
          ],
          "ruleId": "RequiredPredicateError-11",
          "message": {
            "text": "Third parameter was not properly generated as randomized.",
            "richText": "RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext."
          }
        },
        {
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "okhttp3.OkHttpClient.java",
                  "externalLibrary": true,
                  "PossibleExternalLibrary": true
                },
                "region": {
                  "startLine": -1
                }
              },
              "fullyQualifiedLogicalName": "okhttp3::OkHttpClient::newSslSocketFactory"
            }
          ],
          "ruleId": "RequiredPredicateError-12",
          "message": {
            "text": "First parameter was not properly generated as generated Key Managers.",
            "richText": "RequiredPredicateError violating CrySL rule for javax.net.ssl.SSLContext."
          }
        },
        {
          "locations": [
            {
              "physicalLocation": {
                "fileLocation": {
                  "uri": "okhttp3.internal.Util.java",
                  "externalLibrary": true,
                  "PossibleExternalLibrary": true
                },
                "region": {
                  "startLine": -1
                }
              },
              "fullyQualifiedLogicalName": "okhttp3::internal::Util::platformTrustManager"
            }
          ],
          "ruleId": "RequiredPredicateError-13",
          "message": {
            "text": "First parameter was not properly generated as generated Key Store.",
            "richText": "RequiredPredicateError violating CrySL rule for javax.net.ssl.TrustManagerFactory."
          }
        }
      ],
      "tool": {
        "name": "CryptoAnalysis",
        "semanticVersion": null,
        "language": "en-US",
        "version": null
      }
    }
  ]
}