quit
lib_files
lib_file_name
continue
next
crypto_file
next
lib_file_name
continue
crypto_file
lib_file_name
lib_file-name
quit
counter = 0
counter
crypto_file_data['runs'][0]['results'].each {|x| counter += 1 if x['locations'][0]['physicalLocation']['fileLocation']['externalLibrary']=true}
counter = 0
crypto_file_data['runs'][0]['results'].each {|x| counter += 1 if x['locations'][0]['physicalLocation']['fileLocation']['externalLibrary']=true}
crypto_file_data['runs'][0]['results'].each {|x| x.dig('externalLibrary')}
crypto_file_data['runs'][0]['results'].each {|x| x.dig['externalLibrary']}
crypto_file_data['runs'][0]['results'].each {|x| x.dig?['externalLibrary']}
crypto_file_data['runs'][0]['results'].each {|x| x['locations'][0]['physicalLocation']['fileLocation']['externalLibrary'].present?}
crypto_file_data['runs'][0]['results'].each {|x| ['locations'][0]['physicalLocation']['fileLocation']['externalLibrary'] =
crypto_file_data[locations]
crypto_file_data
crypto_file_data.flatten[3][0]["locations"]
crypto_file_data.flatten[3][0]["uri"]
crypto_file_data.flatten[3][0]
crypto_file_data.flatten[3][0][1]
crypto_file_data.flatten[3][0][0]
crypto_file_data.flatten[3][1]
crypto_file_data.flatten[3][0]
crypto_file_data.flatten[3].include?("externalLibrary")
crypto_file_data.flatten[3]
crypto_file_data.flatten[4]
crypto_file_data.flatten[3]
crypto_file_data.flatten[2]
crypto_file_data.flatten[1]
crypto_file_data.flatten[0]
crypto_file_data.flatten.each_line
crypto_file_data.flatten
crypto_file_data.each_cons(1)
crypto_file_data.each_cons { |x| p x }
crypto_file_data.each_slice { |x| p x }
crypto_file_data.each_line { |x| p x }
crypto_file_data[0]
crypto_file_data
crypto_file_data.externalLibrary
quit
results
lib_file_data
splited_lib_data
splited_result
quit
c
b = ["4", "1", "6"]
b = ["4", "1", "5"]
a = ["1", "2", "3"]
b = ["4", "1", "5"]
a = ["1", "2", "3"]
result.include?("androidx")
result.include?("de")
lib_file_data_item['Package'].gsub('.', ' ').split
result.gsub('.', ' ').split
quit
lib_file_data.each { |x|  p results.last.gsub("."," ").split.include?(x['Package'].gsub(".", " ").split) if !x['Package'].nil? }
lib_file_data.each { |x|  p results.last.gsub("."," ").split.include?(x['Package']) if !x['Package'].nil? }
results.last.gsub(".", " ").split
results.last.gsub(".", " ")
results.last.split
lib_file_data.each { |x|  p results.last.include?(x['Package']) if !x['Package'].nil? }
lib_file_data.each { |x|  p results.last.any?(x['Package']) if !x['Package'].nil? }
results.last
result.last
lib_file_data.each { |x| p x['Package'] }
lib_file_data.each { |x|  p results.last.include?(x['Package']) if !x['Package'].nil? }
lib_file_data.each { |x| if !x['Package'].nil? p results.last.include?(x['Package']) end }
lib_file_data.each { |x| if !x['Package'].nil? p results.last.include?(x['Package']) }
lib_file_data.each { |x| p x['Package'] }
lib_file_data[0]['Package']
lib_file_data.each { |x| results.last.include?(x['Package']) }
lib_file_data.each { |x| results.last.include?(x) }
lib_file_data
results.last.include?(lib_file_data_item['Package'])
results.last
results.count
results
result
crypto_file_data['runs'][0]['results'][index]['locations'][0]['physicalLocation']['fileLocation']
quit
next
lib_file_data_item['Package']
        byebug
quit
continue
result
index
continue
index
result
continue
result
index
continue
index
result
continue
result
continue
result
continue
result
continue
result
continue
result
continue
result
ib_file_data_item['Package']
continue
result
result.include?(lib_file_data_item['Package'])
next
lib_file_data_item['Package'].nil?
lib_file_data_item['Package']
quit
continue
lib_file_data_item['Package']
continue
lib_file_data_item['Package']
continue
lib_file_data_item['Package']
continue
next
lib_file_data_item['Package']
next
lib_file_data_item['Package']
next
lib_file_data_item['Package']
next
lib_file_data_item['Package']
next
lib_file_data_item['Package']
lib_file_data_item
quit
continue
lib_file_data_item['Package']
next
lib_file_data_item['Package']
result
quit
lib_file_data[2]['Package']
lib_file_data[1]['Package']
lib_file_data[0]['Package']
lib_file_data.size
lib_file_data[0]
lib_file_data["Package"]
lib_file_data
lib_file_data_item
lib_file_data
lib_file_data_item
lib_file_data_item['Package']
result
lib_file_data_item['Package'].to_s
quit
result
lib_file_data_item['Package'].to_s
next
result
lib_file_data_item['Package'].to_s
next
lib_file_data_item['Package'].to_s
next
lib_file_data_item['Package'].to_s
next
lib_file_data_item['Package'].to_s
result
ubycontinue
quit
extract_and_format_name_sarif(lib_file_name)
extract_and_format_name_sarif(lib_file_name).eql?("cryptoguard-sarif/de.varengold.activeTAN_34-debug.apk-sarif.json")
"cryptoguard-sarif/de.varengold.activeTAN_34-debug.apk-sarif.json"
File.open("cryptoguard-sarif/de.varengold.activeTAN_34-debug.apk-sarif.json", 'r')
"cryptoguard-sarif/de.varengold.activeTAN_34-debug.apk-sarif.json"
extract_and_format_name_sarif(lib_file_name).eql?("cryptoguard-sarif/de.varengold.activeTAN_34-debug.apk-sarif.json")
"cryptoguard-sarif/de.varengold.activeTAN_34-debug.apk-sarif.json"
extract_and_format_name_sarif(lib_file_name)
File.open("cryptoguard-sarif/de.varengold.activeTAN_34-debug.apk-sarif.json", 'r')
File.open("cryptoguard-sarif/", 'r')
File.open("cryptoguard-sarif", 'r')
File.open("cryptoguard-saraif", 'r')
extract_and_format_name_sarif(lib_file_name)
Dir
DIR
File.open(extract_and_format_name_sarif(lib_file_name), 'r')
continue
extract_and_format_name_sarif(lib_file_name)
next
continue
extract_and_format_name_sarif(lib_file_name)
quit
extract_and_format_name_sarif(lib_file_name)
quit
result
lib_file_data_item['Package']
continue
lib_file_data_item['Package']
continue
lib_file_data_item['Package']
continue
lib_file_data_item['Package']
next
lib_file_data_item['Package']
next
lib_file_data_item['Package']
result
quit
external_library
quit
external_library
quit
result
results
lib_file_data[0]
lib_file_data[0]['Package']
lib_file_data[2]
lib_file_data[1]
lib_file_data[0]
lib_file_data
quit
results[0].include?("com.google.android.gms")
results.each { |x| x.gsub!(' ', '.') }
results
results.collect { |v| [library, v] }
results.collect
results.flatten
array.flatten
results
results[0].split[0]
results[0].split
results[0]
results[0][0]
results[0].split
results[0]
results.each { |x| x.gsub!('.', ' ') }
results[0]
results[0].splice
results[0].slice(3)
results[0]
results.each { |x| x.gsub!('/', '.') }
results.each { |x| x.gsub('/', '.') }
results[0].gsub('/', '.')
results[0]
results.each { |x| x.gsub('\/', '.') }
results.each { |x| x.gsub("\/", ".") }
results = results.each { |x| x.gsub("\/", ".") }
