q
lib.include?('externalLibrary')
lib
c
lib
c
lib
q
lib_file_data['Issues'].count
lib_file_data['Issues']
lib_file_data['Target']
lib_file_data
q
c
step
lib_file_data = JSON.load(lib_file)
step
File.basename(lib_file_name)
step
lib_file = File.open(lib_file_name, 'r')
lib_file_name
q
c
result.gsub(/^([a-z].*).apk./,"")
result.gsub("/^([a-z].*).apk./","")
result.gsub("^([a-z].*).apk.","")
result.gsub("([a-z].*).apk.","")
result.gsub("^([a-z].*).apk.","")
result
splited_result.pop
splited_result
result.split
result
splited_result
q
splited_lib_data
splited_result
c
splited_lib_data
splited
splited_result
q
crypto_file_data['Issues'][index]
crypto_file_data['Issues'][index]['locations']
crypto_file_data['Issues'][index]['locations']['externalLibrary'] = true
rypto_file_data['Issues'][index]['locations']['externalLibrary'] = true
q
results
c
crypto_file_data['Issues']
crypto_file_data
c
q
File.new(format_crypto_lib_merged_name(lib_file_name), 'W')
c
q
format_crypto_lib_merged_name(lib_file_name)
File.new(format_crypto_lib_merged_name(lib_file_name), 'w')
File.new(format_crypto_lib_merged_name(lib_file_name), '')
File.new(format_crypto_lib_merged_name(lib_file_name), '+w')
File.new(format_crypto_lib_merged_name(lib_file_name), 'W')
File.new(format_crypto_lib_merged_name(lib_file_name), 'w')
c
q
file.gsub('.log', '.scout.merged')
file
CRYPTO_LIB_MERGED_LIBSCOUT_PATH
LIBSCOUT_PATH
file.gsub(LIBSCOUT_PATH, CRYPTO_LIB_MERGED_LIBSCOUT_PATH)
c
q
lib_file_name
merged_file = File.new(format_crypto_lib_merged_name(lib_file_name), 'w')
q
merged_file = File.new(format_crypto_lib_merged_name(lib_file_name), 'w')
format_crypto_lib_merged_name(lib_file_name)
q
crypto_file_data["Issues"][0]
crypto_file_data
crypto_file_data["Issues"].count
crypto_file_data["Issues"][0]
crypto_file_data["Issues"]
crypto_file_data
q
lib_file_data_item['Package'].gsub('.', ' ').split
result.gsub('.', ' ').split
esult.gsub('.', ' ').split
lib_file_data_item
q
x["_FullPath"].gsub('/', '.')
x["_FullPath"].gsub('*.apk', '')
q
crypto_file_data["Issues"].each { |x| p x["_FullPath"] }
crypto_file_data["Issues"].each { |x| p x }
crypto_file_data["Issues"].count
crypto_file_data["Issues"]
crypto_file_data
c
crypto_file_data
c
continue
File.open(extract_and_format_name_sarif(lib_file_name), 'r')
c
File.open(extract_and_format_name_sarif(lib_file_name), 'r')
q
File.open(extract_and_format_name_sarif(lib_file_name), 'r')
q
lib_file_data["Target"]["FullPath"]
c
lib_file_data["Target"]["FullPath"]
c
lib_file_data["Target"]["FullPath"]
lib_file_data["Target"]
lib_file_data["FullPath"]
lib_file_data["Fullpath"]
lib_file_data["Fullpath]
lib_file_data["Target"]
lib_file_data[:Target]
lib_file_data[:FullPath]
lib_file_data
c
Dir[CRYPTOGUARD_PATH]
q
Dir[CRYPTOGUARD_PATH]
DirDir[CRYPTOGUARD_PATH]
Dir
c
files_count
c
files_count
c
files_count
c
files_count
Dir[CRYPTOGUARD_PATH]
q
Dir[CRYPTOGUARD_PATH]
ls
files_count
q
File.open(extract_and_format_name_sarif(lib_file_name), 'r')
q
File.open(extract_and_format_name_sarif(lib_file_name), 'r')
c
file.gsub(LIBSCOUT_PATH, CRYPTOGUARD_PATH)
c
file.gsub(LIBSCOUT_PATH, CRYPTOGUARD_PATH)
file.gsub(LIBSCOUT_PATH, CRYPTOGUARD_SARIF_PATH)
file
q
lib_file_data
lib_file
crypto_file
cryto_file_data
c
Dir[LIBSCOUT_LOG_JSON_PATH]
c
Dir[LIBSCOUT_LOG_JSON_PATH]
lib_files
