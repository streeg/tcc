q
c
q
lib
c
lib
c
lib
c
lib
c
lib
c
lib
c
lib
c
lib
c!
c
lib_file_data['runs'][0]['results'].count
q
lib_file_data['runs'][0]['results'].count
lib_file_data
libs_count
q
scout_file_data_item[78]
scout_file_data_item[79]
scout_file_data_item.count
index
scout_file_data_item
e
q
c
e
q
scout_file_data_item[index]['LibraryIndentified']
c
scout_file_data_item[index]['LibraryIndentified']
c
scout_file_data_item[index]['LibraryIndentified']
c
scout_file_data_item[index]['LibraryIndentified']
c
scout_file_data_item[index]['LibraryIndentified']
c
scout_file_data_item[index]['LibraryIndentified']
q
lib_file_name.gsub('.scout.merged.json', '.library_added.json')
c
lib_file_name.gsub('.scout.merged.json', '.library_added.json')
c
lib_file_name.gsub('.scout.merged.json', '.library_added.json')
c
lib_file_name.gsub('.scout.merged.json', '.library_added.json')
c
lib_file_name.gsub('.scout.merged.json', '.library_added.json')
lib_file_name
q
lib_file_name
path_lib_file_name
c!
c
splited_lib_data
splited_result
q
scout_file_data_item[index]
scout_file_data_item
result
c
q
 scout_file = File.open(SCOUT_WITH_LIBRARY_INDENTIFIER + lib_file_name.gsub('scout.merged.json', 'log.json'), 'r')
 scout_file = File.open(SCOUT_WITH_LIBRARY_INDENTIFIER + lib_file_name.gsub('scout.merged.json', '.log.json'), 'r')
 scout_file = File.open(SCOUT_WITH_LIBRARY_INDENTIFIER + lib_file_name.gsub('.merged.json', '.log.json'), 'r')
q
lib_file_name
SCOUT_WITH_LIBRARY_INDENTIFIER
  byebug
q
File.basename(file)
file
file.name
file
lib_file.path
lib_file.to_s
lib_file.path
lib_file.methods
lib_file.exists?
lib_file.basename
lib_file.gsub
lib_file
lib_file.basename
lib_file.baseame
lib_file.name
lib_file
lib_file_data
lib_file_name
lib_file_data
c!
c
q
cq
c
splited_result
splited_lib_data
c
splited_result
splited_lib_data
c
splited_lib_data
splited_result
lib_file_data
q
merged_file = File.new(path_lib_file_name, 'w')
path_lib_file_name
q
merged_file = File.new("LIBRARY_ADDED_PATH + path_lib_file_name", 'w')
merged_file = File.new(LIBRARY_ADDED_PATH + path_lib_file_name, 'w')
merged_file = File.new(path_lib_file_name, 'w')
path_lib_file_name
q
path_lib_file_name
lib_file_name.gsub('.apk/', '.library_added.json')
lib_file_name
path_lib_file_name
merged_file = File.new(path_lib_file_name, 'w')
merged_file = File.new(LIBRARY_ADDED_PATH + path_lib_file_name, 'w')
q
File.new(, 'w')
lib_file_name
File.new(lib_file_name, 'w')
File.new(LIBRARY_ADDED_PATH + lib_file_name, 'w')
q
cc
c
c!
q
scout_file_data_item[index]
scout_file_data_item[index]['LibraryIdentified']
c!
q
scout_file_data_item[0]['LibraryIndentified']
scout_file_data_item[0]
scout_file_data_item
q
result.gsub('.', ' ').split
result
q
result
scout_file_data_item[4]
scout_file_data_item[3]
scout_file_data_item[2]
scout_file_data_item[1]
scout_file_data_item[0]
scout_file_data_item
q
scout_file_data[1]
scout_file_data[0]
scout_file_data_item[-2]
scout_file_data_item[-1]
scout_file_data_item[2]
scout_file_data_item[1]
scout_file_data_item[0]
scout_file_data_item[0]]
scout_file_data_item
q
scout_file_data_item.count
scout_file_data
scout_file_data_item
c
results
q
lib_file_data['runs']
lib_file_data
lib_file_data['runs'][0]['results'][index]['locations'][0]['physicalLocation']['fileLocation']
lib_file_data
scout_file_data
q
scout_file
q
scout_file = File.open(SCOUT_WITH_LIBRARY_INDENTIFIER + lib_file_name.gsub('.apk/', '.log.json'), 'r')
scout_file = File.open(SCOUT_WITH_LIBRARY_INDENTIFIER + lib_file_name.gsub('.apk/', '.json'), 'r')
lib_file_name.gsub('.apk/', '.json')
SCOUT_WITH_LIBRARY_INDENTIFIER
lib_file_name
q
qq
lib_file_name
q
lib_file_data['Issues'][0]
lib_file_data['Issues']
lib_file_data['Target']
lib_file_data['Target']['FullPath']
lib_file_data.first
lib_file_data[0]
lib_file_data
c
lib_files.count
q
lib_files.each {|file| p file}
Dir[CRYPTOGUARD_PATH]
lib_files.count
lib_files
c!
c
merged_file
c!
crypto_file_data
c
crypto_file_data
c
crypto_file_data
c
crypto_file_data
c
crypto_file_data
c
crypto_file_data
c
merged_file.write(JSON.pretty_generate(crypto_file_data))
c!
c
lib_file_name
q
lib_file_data
c!
c
q
extract_and_format_name_sarif(lib_file_name)
lib_file_name
lib_file
q
c
extract_and_format_name_sarif(lib_file_name)
lib_file_name
  crypto_file = File.open(extract_and_format_name_sarif(lib_file_name), 'r')
lib_file_name
lib_fil_name
c
lib_file_name
  byebug
q
c
lib_files
q
c
File.open(extract_and_format_name_sarif(lib_file_name), 'r')
extract_and_format_name_sarif(lib_file_name)
c
lib_file_name
q
cq
lib_file_name
q
lib_file_name
File.open(extract_and_format_name_sarif(lib_file_name), 'r')
